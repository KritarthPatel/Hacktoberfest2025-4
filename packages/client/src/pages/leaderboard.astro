---
import Layout from '../layouts/Layout.astro'
import Navbar from '../components/Navbar.astro'
import Footer from '../components/Footer.astro'
---

<Layout title="Leaderboard - Hacktoberfest 2025">
  <Fragment slot="navbar">
    <Navbar />
  </Fragment>

  <section class="py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4 font-mono">
          Leaderboard
        </h1>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto font-mono">
          See who's leading the pack in Hacktoberfest 2025 contributions
        </p>
      </div>

      <div id="loading" class="text-center py-16">
        <div
          class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600">
        </div>
        <p class="mt-4 text-gray-600 font-mono">Loading leaderboard...</p>
      </div>

      <div
        id="error"
        class="hidden bg-red-50 border border-red-200 rounded-lg p-6 mb-8">
        <h3 class="text-red-800 font-semibold font-mono mb-2">
          Backend Connection Error
        </h3>
        <p id="error-message" class="text-red-700 font-mono text-sm"></p>
      </div>

      <!-- Dynamic content will be populated here -->
      <div id="podium" class="mb-16 text-center hidden"></div>
      <div id="leaderboard-table" class="hidden"></div>
    </div>
  </section>

  <Footer />
</Layout>

<script>
  import { LeaderboardRenderer } from '../utils/LeaderboardRenderer.ts';
  
  const API_BASE =
    import.meta.env.MODE == 'development' ? 'http://localhost:4000' : ''

  interface LeaderboardEntry {
    username: string
    display_name: string
    avatar_url: string
    total_prs: number
    merged_prs: number
  }

  async function loadLeaderboard() {
    try {
      const res = await fetch(API_BASE + '/api/leaderboard')

      if (!res.ok) {
        throw new Error('API Error: ' + res.status + ' ' + res.statusText)
      }

      const leaderboard: LeaderboardEntry[] = await res.json()

      const loading = document.getElementById('loading')
      if (loading) loading.classList.add('hidden')

      if (leaderboard.length >= 3) {
        renderPodium(leaderboard)
      }

      renderLeaderboardTable(leaderboard)
    } catch (err) {
      console.error('Leaderboard fetch error:', err)
      const loading = document.getElementById('loading')
      if (loading) loading.classList.add('hidden')
      const errorDiv = document.getElementById('error')
      const errorMsg = document.getElementById('error-message')
      if (errorDiv && errorMsg) {
        errorDiv.classList.remove('hidden')
        errorMsg.textContent =
          err instanceof Error ? err.message : 'Failed to load leaderboard'
      }
    }
  }

  function renderPodium(leaderboard: LeaderboardEntry[]) {
    const podiumContainer = document.getElementById('podium') as HTMLElement;
    if (!podiumContainer) return;

    const podiumHTML = LeaderboardRenderer.renderPodium(leaderboard);
    podiumContainer.innerHTML = podiumHTML;
    podiumContainer.classList.remove('hidden');
  }

  function renderLeaderboardTable(leaderboard: LeaderboardEntry[]) {
    const tableContainer = document.getElementById('leaderboard-table') as HTMLElement;
    if (!tableContainer) return;

    const tableHTML = LeaderboardRenderer.renderTable(leaderboard);
    tableContainer.innerHTML = tableHTML;
    tableContainer.classList.remove('hidden');
  }



  loadLeaderboard()
</script>
