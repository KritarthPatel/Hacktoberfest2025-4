---
interface Props {
  id?: string;
}

const { id = 'pr-modal' } = Astro.props;
---

<div id={id} class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" data-pr-modal>
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-gray-900 border border-green-600 rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-6">
        <h2 id="modal-title" class="text-xl font-bold text-green-100 font-mono">
          User PRs
        </h2>
        <button 
          id="close-modal"
          class="text-green-300 hover:text-green-100 text-2xl font-bold"
          aria-label="Close modal"
        >
          Ã—
        </button>
      </div>
      <div id="modal-content" data-modal-content>
        <!-- PR content will be populated by client-side script -->
        <div class="text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400 mx-auto mb-2"></div>
          <p class="text-green-300 font-mono">Loading PRs...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  interface PR {
    pr_number: number;
    title: string;
    state: string;
    url: string;
    createdAt: string;
    repository: {
      name: string;
      owner: {
        username: string;
      };
    };
  }

  function renderPRItem(pr: PR): string {
    const createdDate = new Date(pr.createdAt).toLocaleDateString();
    const statusIcon = pr.state === 'open' ? 'ðŸŸ¢' : 'ðŸŸ£';
    const repoUrl = `https://github.com/${pr.repository.owner.username}/${pr.repository.name}`;

    return `
      <div class="border border-green-700 rounded-lg p-4">
        <div class="flex justify-between items-start mb-2">
          <h4 class="text-green-100 font-mono">
            ${statusIcon} ${pr.title}
          </h4>
          <span class="text-green-400 text-sm font-mono">
            #${pr.pr_number}
          </span>
        </div>
        <a 
          class="text-green-300 text-sm font-mono mb-2 block hover:text-green-100 transition-colors" 
          href="${repoUrl}"
          target="_blank"
        >
          ${pr.repository.owner.username}/${pr.repository.name}
        </a>
        <p class="text-green-400 text-sm font-mono mb-2">
          Created: ${createdDate}
        </p>
        <a 
          href="${pr.url}" 
          target="_blank" 
          class="text-blue-400 hover:text-blue-300 text-sm font-mono transition-colors"
        >
          View on GitHub â†’
        </a>
      </div>
    `;
  }

  function populatePRModal(
    modalElement: HTMLElement,
    titleElement: HTMLElement,
    contentElement: HTMLElement,
    username: string,
    prs: PR[]
  ) {
    if (!modalElement?.hasAttribute('data-pr-modal') || 
        !contentElement?.hasAttribute('data-modal-content')) {
      return;
    }

    titleElement.textContent = `PRs by @${username}`;
    
    if (prs.length === 0) {
      contentElement.innerHTML = '<p class="text-green-300 font-mono">No PRs found.</p>';
    } else {
      contentElement.innerHTML = `
        <div class="space-y-4">
          ${prs.map(renderPRItem).join('')}
        </div>
      `;
    }
    
    modalElement.classList.remove('hidden');
  }

  function setupPRModalHandlers(modalElement: HTMLElement) {
    if (!modalElement?.hasAttribute('data-pr-modal')) return;

    const closeButton = modalElement.querySelector('#close-modal');
    
    closeButton?.addEventListener('click', () => {
      modalElement.classList.add('hidden');
    });

    modalElement.addEventListener('click', (e) => {
      if ((e.target as HTMLElement).id === modalElement.id) {
        modalElement.classList.add('hidden');
      }
    });
  }

  // Make functions globally available
  window.populatePRModal = populatePRModal;
  window.setupPRModalHandlers = setupPRModalHandlers;

  declare global {
    interface Window {
      populatePRModal: typeof populatePRModal;
      setupPRModalHandlers: typeof setupPRModalHandlers;
    }
  }
</script>